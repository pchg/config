" Les touches de fonctions avec des raccourcis (√† maintenir):
" F1  F2  F3  F4  F5  F6  F7  F8  F9  F10  F11  F12  F13  F14  F15  F16  F17  F18  F19  F20  
" -   -   |   |   |   |   |   |   |    |    |    |   -    -    -    -    -    -    -    -
" F2  \_ (libre)
" F3      \_ ouvre une fen√™tre au-dessus avec l'occurrence pr√©c√©dente du mot sous le curseur
" F4          \_ (libre)
" F5              \_ sauver et faire tourner le fichier courant par rebol, ou plut√¥t par le shebang
" F6                  \_ faire tourner le paragraphe courant par rebol
" ctrl-F6             \_ faire tourner le paragraphe courant par python3
" shift-F6            \_ faire tourner le paragraphe courant par javascript
" ctrl-shift-F6       \_ faire tourner le paragraphe courant par une compilation de C et une ex√©cution 
" F7                      \_ insertion de timestamp, comme dans le bon vieux ultraedit
" F8                          \_ faire tourner le paragraphe courant par bash
" F9                              \_ dict√©e du paragraphe en cours
" shift-F9                        \_ shift => idem en anglais
" F10                                  \_ correction orthographique du paragraphe courant
" F11                                       \_ aller √† l'√©tiquette _______________ENCOURS_______________ pr√©c√©dente
" F12                                            \_ derni√®re macro

syntax on
set noautoindent
set noerrorbells

set ignorecase
set ruler
set showmatch
set showmode

" changes special characters in search patterns (default)
" set magic
set esckeys            " Required to be able to use keypad keys and map missed escape sequences

" get easier to use and more user friendly vim defaults
" CAUTION: This option breaks some vi compatibility. 
"          Switch it off if you prefer real vi compatibility
set nocompatible

" Complete longest common string, then each full match
" enable this for bash compatible behaviour
" set wildmode=longest,full

" Try to get the correct main terminal type/*{{{*/
if &term =~ "xterm"
    let myterm = "xterm"
else
    let myterm =  &term
endif
let myterm = substitute(myterm, "cons[0-9][0-9].*$",  "linux", "")
let myterm = substitute(myterm, "vt1[0-9][0-9].*$",   "vt100", "")
let myterm = substitute(myterm, "vt2[0-9][0-9].*$",   "vt220", "")
let myterm = substitute(myterm, "\\([^-]*\\)[_-].*$", "\\1",   "")
"/*}}}*/

" Here we define the keys of the NumLock in keyboard transmit mode of xterm/*{{{*/
" which misses or hasn't activated Alt/NumLock Modifiers.  Often not defined
" within termcap/terminfo and we should map the character printed on the keys.
if myterm == "xterm" || myterm == "kvt" || myterm == "gnome"
    " keys in insert/command mode.
    map! <ESC>Oo  :
    map! <ESC>Oj  *
    map! <ESC>Om  -
    map! <ESC>Ok  +
    map! <ESC>Ol  ,
    map! <ESC>OM  
    map! <ESC>Ow  7
    map! <ESC>Ox  8
    map! <ESC>Oy  9
    map! <ESC>Ot  4
    map! <ESC>Ou  5
    map! <ESC>Ov  6
    map! <ESC>Oq  1
    map! <ESC>Or  2
    map! <ESC>Os  3
    map! <ESC>Op  0
    map! <ESC>On  .
    " keys in normal mode
    map <ESC>Oo  :
    map <ESC>Oj  *
    map <ESC>Om  -
    map <ESC>Ok  +
    map <ESC>Ol  ,
    map <ESC>OM  
    map <ESC>Ow  7
    map <ESC>Ox  8
    map <ESC>Oy  9
    map <ESC>Ot  4
    map <ESC>Ou  5
    map <ESC>Ov  6
    map <ESC>Oq  1
    map <ESC>Or  2
    map <ESC>Os  3
    map <ESC>Op  0
    map <ESC>On  .
endif
"/*}}}*/

" xterm but without activated keyboard transmit mode/*{{{*/
" and therefore not defined in termcap/terminfo.
if myterm == "xterm" || myterm == "kvt" || myterm == "gnome"
    " keys in insert/command mode.
    map! <Esc>[H  <Home>
    map! <Esc>[F  <End>
    " Home/End: older xterms do not fit termcap/terminfo.
    map! <Esc>[1~ <Home>
    map! <Esc>[4~ <End>
    " Up/Down/Right/Left
    map! <Esc>[A  <Up>
    map! <Esc>[B  <Down>
    map! <Esc>[C  <Right>
    map! <Esc>[D  <Left>
    " KP_5 (NumLock off)
    map! <Esc>[E  <Insert>
    " PageUp/PageDown
    map <ESC>[5~ <PageUp>
    map <ESC>[6~ <PageDown>
    map <ESC>[5;2~ <PageUp>
    map <ESC>[6;2~ <PageDown>
    map <ESC>[5;5~ <PageUp>
    map <ESC>[6;5~ <PageDown>
    " keys in normal mode
    map <ESC>[H  0
    map <ESC>[F  $
    " Home/End: older xterms do not fit termcap/terminfo.
    map <ESC>[1~ 0
    map <ESC>[4~ $
    " Up/Down/Right/Left
    map <ESC>[A  k
    map <ESC>[B  j
    map <ESC>[C  l
    map <ESC>[D  h
    " KP_5 (NumLock off)
    map <ESC>[E  i
    " PageUp/PageDown
    map <ESC>[5~ 
    map <ESC>[6~ 
    map <ESC>[5;2~ 
    map <ESC>[6;2~ 
    map <ESC>[5;5~ 
    map <ESC>[6;5~ 
endif
"/*}}}*/

" xterm/kvt but with activated keyboard transmit mode./*{{{*/
" Sometimes not or wrong defined within termcap/terminfo.
if myterm == "xterm" || myterm == "kvt" || myterm == "gnome"
    " keys in insert/command mode.
    map! <Esc>OH <Home>
    map! <Esc>OF <End>
    map! <ESC>O2H <Home>
    map! <ESC>O2F <End>
    map! <ESC>O5H <Home>
    map! <ESC>O5F <End>
    " Cursor keys which works mostly
    " map! <Esc>OA <Up>
    " map! <Esc>OB <Down>
    " map! <Esc>OC <Right>
    " map! <Esc>OD <Left>
    map! <Esc>[2;2~ <Insert>
    map! <Esc>[3;2~ <Delete>
    map! <Esc>[2;5~ <Insert>
    map! <Esc>[3;5~ <Delete>
    map! <Esc>O2A <PageUp>
    map! <Esc>O2B <PageDown>
    map! <Esc>O2C <S-Right>
    map! <Esc>O2D <S-Left>
    map! <Esc>O5A <PageUp>
    map! <Esc>O5B <PageDown>
    map! <Esc>O5C <S-Right>
    map! <Esc>O5D <S-Left>
    " KP_5 (NumLock off)
    map! <Esc>OE <Insert>
    " keys in normal mode
    map <ESC>OH  0
    map <ESC>OF  $
    map <ESC>O2H  0
    map <ESC>O2F  $
    map <ESC>O5H  0
    map <ESC>O5F  $
    " Cursor keys which works mostly
    " map <ESC>OA  k
    " map <ESC>OB  j
    " map <ESC>OD  h
    " map <ESC>OC  l
    map <Esc>[2;2~ i
    map <Esc>[3;2~ x
    map <Esc>[2;5~ i
    map <Esc>[3;5~ x
    map <ESC>O2A  ^B
    map <ESC>O2B  ^F
    map <ESC>O2D  b
    map <ESC>O2C  w
    map <ESC>O5A  ^B
    map <ESC>O5B  ^F
    map <ESC>O5D  b
    map <ESC>O5C  w
    " KP_5 (NumLock off)
    map <ESC>OE  i
endif
"/*}}}*/

if myterm == "linux"
    " keys in insert/command mode.
    map! <Esc>[G  <Insert>
    " KP_5 (NumLock off)
    " keys in normal mode
    " KP_5 (NumLock off)
    map <ESC>[G  i
endif

" This escape sequence is the well known ANSI sequence for
" Remove Character Under The Cursor (RCUTC[tm])
map! <Esc>[3~ <Delete>
map  <ESC>[3~    x

" Only do this part when compiled with support for autocommands. /*{{{*/
if has("autocmd") 
  " When editing a file, always jump to the last known cursor position. 
  " Don't do it when the position is invalid or when inside an event handler 
  " (happens when dropping a file on gvim). 
  autocmd BufReadPost * 
    \ if line("'\"") > 0 && line("'\"") <= line("$") | 
    \   exe "normal g`\"" | 
    \ endif 
 
endif " has("autocmd")
"/*}}}*/

" Changed default required by SuSE security team--be aware if enabling this
" that it potentially can open for malicious users to do harmful things.
set modelines=0

" get easier to use and more user friendly vim defaults
" /etc/vimrc ends here

set hlsearch
set incsearch
set scrolloff=5
set mouse=a
set infercase
"set autoindent

" La correction orthographique, c'est tr√®s tr√®s bien {{{
map ,c :w<CR>:!aspell -c %<CR>:e %<CR>
" Pour le paragraphe en cours:
map <F10> vip :w! /tmp/tmp_current_paragraph<cr>dip<up>:!aspell -c /tmp/tmp_current_paragraph<cr> :r /tmp/tmp_current_paragraph<cr>
" i<cr>
"}}}

" La dict√©e, c'est tr√®s tr√®s bien aussi, pour le paragraphe en cours:{{{
map <F9> vip :w! /tmp/tmp_vim_block<cr> :!espeak -v fr -s 200 -f /tmp/tmp_vim_block &<cr>

" Pareil, en anglais:
map <S-F9> vip :w! /tmp/tmp_vim_block<cr> :!espeak -v en -s 200 -f /tmp/tmp_vim_block &<cr>
"}}}


"copi√© depuis /usr/share/doc/hibernate/examples/hibernate.vim.gz{{{
   augroup filetypedetect
       au BufNewFile,BufRead hibernate.conf set filetype=hibernate
       au BufNewFile,BufRead common.conf set filetype=hibernate
       au BufNewFile,BufRead suspend2.conf set filetype=hibernate
       au BufNewFile,BufRead disk.conf set filetype=hibernate
       au BufNewFile,BufRead ram.conf set filetype=hibernate
   augroup END

set keymodel=startsel,stopsel
"}}}



""""""""""""""""""""""""""""""""""""""""""""""""""
"√† partir d'un vimrc trouv√© sur la Toile:/*{{{*/
""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""
" Fichier .vimrc de Nicolas Gressier
" Cr√©√© le 11 mai 2006
" Yoshidu62@gmail.com
" Mise √† jour : 03/06/2009
" Version 2.6
""""""""""""""""""""""""""""""""""""""""""""""""""
"Compl√©tion par tabulation:{{{
""""""""""""""""""""""""""""""""""""""""""""""""""
function! CleverTab()
    "check if at beginning of line of after a space
    if strpart(getline('.'), 0, col('.')-1) =~ '^\s*$'
	return "\<Tab>"
    else
	"use know-word completion
	"return "\<C-N>"
	"use know-word completion, mais plut√¥t √† l'envers
	return "\<C-P>"
    endif
endfunction

function! CleverTabShift()
    "check if at beginning of line or after a space
    if strpart(getline('.'), 0, col('.')-1) =~ '^\s*$'
	return "\<S-Tab>"
    else
	"use known-word completion, √† l'endroit
	return "\<C-N>"
    endif
endfunction

"Mapping sur la touche Tab
inoremap <Tab> <C-R>=CleverTab()<CR>

"et pareil sur la combinaison de touches Shift Tab:
inoremap <S-Tab> <C-R>=CleverTabShift()<CR>
"}}}
"Ctrl-Tab pour naviguer entre les fen√™tres (bof, peu usit√©, abandonn√© le 2022_03_24__18_26_16 avec un " devant):{{{
 
""MARCHE PAS ":map <C-Tab> <C-w><C-w>
""Marche =>
"" http://stackoverflow.com/questions/2686766/mapping-c-tab-in-my-vimrc-fails-in-ubuntu
"" ...
"" Put this in your .vimrc:
"" !! Important - instead of XXXX you must type CTRL-V and then Esc OR copy-paste the whole text and run %s/\(set <F1[34]>=\)XXXX/\=submatch(1) . "\33"/g which is copy-pastable (insert it with <CTRL-R> +).
"set timeout timeoutlen=1000 ttimeoutlen=100
"set <F13>=[27;5;9~
""nnoremap <F13> gt
"map <F13> <C-w><C-w>
"set <F14>=[27;6;9~
""nnoremap <F14> gT
""map <F14> :tabNext<CR>
"map <F14> <C-w><S-w>
""And restart vim.
""Done.
"" Pareil, pour le mode insertion (c'est quand m√™me commode):
"inoremap <F13> <Esc><C-w><C-w>i
"inoremap <F14> <Esc><C-w><S-w>i

"}}}
"Alt-fl√®ches pour naviguer entre les fen√™tres, √† la mode de chez terminator:{{{
map  <A-Up>    :wincmd k<cr>
map  <A-Down>  :wincmd j<cr>
map  <A-Left>  :wincmd h<cr>
map  <A-Right> :wincmd l<cr>
imap <A-Up>    <esc>:wincmd k<cr>i
imap <A-Down>  <esc>:wincmd j<cr>i
imap <A-Left>  <esc>:wincmd h<cr>i
imap <A-Right> <esc>:wincmd l<cr>i

"Alt-hjkl pour naviguer de m√™me:
map <A-k>   :wincmd k<cr>
map <A-j>   :wincmd j<cr>
map <A-h>   :wincmd h<cr>
map <A-l>   :wincmd l<cr>

"Alt-+- pour retailler les fen√™tres:
map  <A-+> :vertical resize +5<cr>
"}}}

" Pour naviguer dans les onglets (bof => non, retent√© le 2022_03_24__18_26_16):{{{
nmap <C-S-tab> :tabprevious<cr>
nmap <C-tab> :tabnext<cr>
nmap <C-t> :tabnew<cr>
map <C-t> :tabnew<cr>
map <C-S-tab> :tabprevious<cr>
map <C-tab> :tabnext<cr>
""map <C-w> :tabclose<cr> "Surtout pas! Quand on commence √† jouer avec les fen√™tres, √ßa interf√®re, mal!
imap <C-S-tab> <ESC>:tabprevious<cr>i
imap <C-tab> <ESC>:tabnext<cr>i
imap <C-t> <ESC>:tabnew<cr>

" Bof: je pr√©f√®re naviguer dans les onglets avec Ctrl-PgUp/Dn: => 2022_03_25__21_10_28 marde, √ßa ne fonctionne pas.
map      <C-PageUp>      :tabprevious<cr>
nmap     <C-PageUp>      :tabprevious<cr>
nnoremap <C-PageUp>      :tabprevious<cr>
inoremap <C-PageUp> <ESC>:tabprevious<cr>i
map      <C-PageDown>      :tabnext<cr>
nmap     <C-PageDown>      :tabnext<cr>
nnoremap <C-PageDown>      :tabnext<cr>
inoremap <C-PageDown> <ESC>:tabnext<cr>i
map      <C-t>      :tabnew<cr>
nnoremap <C-t>      :tabnew<cr>
inoremap <C-t> <ESC>:tabnew<cr>
"map <C-w> :tabclose<cr> "Surtout pas! Quand on commence √† jouer avec les fen√™tres, √ßa interf√®re, mal!



"}}}

"/*}}}*/


"Ctrl-fl√®ches pour d√©placer les lignes, comme dans oOo:{{{
"nnoremap <C-Up> ddkp <CR>	"DONE marche pas => si, ainsi:
"map <C-Up> ddkP
"map <C-Down> ddp
"inoremap <C-Up>   <Esc>ddkPi
"inoremap <C-Down> <Esc>ddpi

" Autre version, trouv√©e dans http://www.billodom.com/talks/vim-key-mapping.pdf: plus efficace, marche avec des s√©lections, en les gardant:
"nnoremap <silent> <C-Up> :move -2<CR>
"nnoremap <silent> <C-Down> :move +<CR>
"xnoremap <silent> <C-Up> :move '<-2<CR>gv
"xnoremap <silent> <C-Down> :move '>+<CR>gv
"imap <silent> <C-Up> <C-O><C-Up>
"imap <silent> <C-Down> <C-O><C-Down>
"smap <silent> <C-Up> <C-G><C-Up><C-G>
"smap <silent> <C-Down> <C-G><C-Down><C-G>

"Encore une autre version, en essayant d'am√©liorer, pour faire comme avant, notamment en bougeant les blocs z:
"nnoremap <C-Up> ddkp <CR>	"DONE marche pas => si, ainsi:
"map <C-Up> ddkP
"map <C-Down> ddp
"inoremap <C-Up>   <Esc>ddkPi
"inoremap <C-Down> <Esc>ddpi
nnoremap <silent> <C-Up> ddkP
nnoremap <silent> <C-Down> ddp
xnoremap <silent> <C-Up> :move '<-2<CR>gv
xnoremap <silent> <C-Down> :move '>+<CR>gv
imap <silent> <C-Up> <Esc>ddkPi
imap <silent> <C-Down> <Esc>ddpi
smap <silent> <C-Up> <Esc>ddkPi
smap <silent> <C-Down> <Esc>ddpi



"}}}

"Ctrl-jk pour faire pareil: (marche pas...) => 2020_07_09__12_13_32 en fait, si on met les lignes map <S-C-k> avant, ce sont elles qui prennent le pas sur les lignes map <C-k>, curieusement. √áa ne le fait pas pour les <C-Fl√®ches, c'est √©trange.
map <C-j> ddp
map <C-k> ddkP
inoremap <C-j> <Esc>ddpi
inoremap <C-k> <Esc>ddkPi

"Shift-Ctrl-fl√®ches pour d√©filer (scroller) de 5 lignes:
map <S-C-Up>    5<C-y>
map <S-C-Down>  5<C-e>
inoremap <S-C-Up>   <Esc>5<C-y>i
inoremap <S-C-Down> <Esc>5<C-e>i

"Shift-Ctrl-jk pour d√©filer (scroller) de 3 lignes:
map <S-C-k> 3<C-y>
map <S-C-j> 3<C-e>
inoremap <S-C-k>   <Esc>3<C-y>i
inoremap <S-C-j>   <Esc>3<C-e>i


" pour les folds ch√©ris:
set foldmethod=marker
set fdc=5
set foldclose=all

"###################################################################################
" mapper F7 avec l'insertion de timestamp, comme dans le bon vieux ultraedit:
"brouillons:{{{
"map <F7> :r !date +\%d/\%m/\%Y\ \%T <Enter>
"07/10/2013 09:51:06
"map <F7> :r !date +\%d_\%m_\%Y__\%T \| sed -e 's/\:/_/g' <Enter>
"23_12_2013__15_48_43
"map <F7> :r !date +\%Y_\%m_\%d__\%T \| sed -e 's/\:/_/g' <Enter>
"2013_12_29__20_29_38

" Je mets la date en ISO 8601, plut√¥t:
":r !date +\%Y_\%m_\%d__\%T 
"2014_01_01__21:55:01
":r !date +\%Y-\%m-\%d_\%T 
"2014-01-01_21:55:51
"map <F7> :r !date +\%Y-\%m-\%d_\%T \| sed -e 's/\:/h/' \| sed -e 's/\:/m/' <Enter>
"non, plut√¥t en ISO underscor√©, comme dans le .bashrc:
"map <F7> :r !date +\%Y_\%m_\%d__\%T \| sed -e 's/\:/_/g' <Enter>
"map <F7> :r!date +\%Y_\%m_\%d__\%T \| sed -e 's/\:/h/' \| sed -e 's/\:/m/'<Enter>
"2014_01_03__14h45m36
"2014_01_07__16h34m19
"}}}
map <F7> :r !date +\%Y_\%m_\%d__\%T \| sed -e 's/\:/_/g' <Enter>A 
inoremap <F7> <Esc>:r !date +\%Y_\%m_\%d__\%T \| sed -e 's/\:/_/g' <Enter>A 
"2014_01_14__08_53_38
"###################################################################################

"mapper F10 avec la ligne courante √† faire tourner en tant que commande vi (:)
"map <F10> <Esc>V<Left><Home>:<S-Ins><Enter>
" => marche pas...

"mapper F11 avec la recherche de la pr√©c√©dente occurrence de _______________ENCOURS_______________
nnoremap <F11>        ?\<_______________ENCOURS_______________<cr>
inoremap <F11>   <Esc>?\<_______________ENCOURS_______________<cr>i

"mapper Shift-F11 avec la m√™me chose, dans l'autre sens:
nnoremap <S-F11>      /\<_______________ENCOURS_______________<cr>
inoremap <S-F11> <Esc>/\<_______________ENCOURS_______________<cr>i

"mapper Ctrl-F11 avec la recherche de la pr√©c√©dente occurrence de @#
nnoremap <C-F11>        ?@#<cr>
inoremap <C-F11>   <Esc>?@#<cr>i

"mapper Ctrl-Shift-F11 avec la m√™me chose, dans l'autre sens:
nnoremap <C-S-F11>      /@#<cr>
inoremap <C-S-F11>   <Esc>/@#<cr>i



"mapper F12 avec la derni√®re macro:
map <F12> @@
imap <F12> <ESC>@@i

set history=10000

set encoding=utf-8
set fileencoding=utf-8


"highlighter toutes les occurrences du mot sous le curseur:/*{{{*/
"http://vim.wikia.com/wiki/Auto_highlight_current_word_when_idle
"
"created 2003 ¬∑ complexity basic ¬∑ author mosh ¬∑ version 6.0
"Vim can easily highlight all search pattern matches and search for the current word (the word under the cursor). This tip shows how to automatically highlight all occurrences of the current word without searching. That can be useful when examining unfamiliar source code: just move the cursor to a variable, and all occurrences of the variable will be highlighted.
"
"
" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo 'Highlight current word: off'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=500
    echo 'Highlight current word: ON'
    return 1
  endif
endfunction
" on fait √ßa avec... ! (pas loin de *)
map ! :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
" non, plut√¥t avec... ¬µ (maj - *)
" => marche pas 
":map <S-*> :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
" ni <C-*> ni <S-C-*> ni <S-*> ... donc retour au !

"/*}}}*/

"quelques conseils de http://vim.wikia.com/wiki/Using_standard_editor_shortcuts_in_Vim; fait un peu (beaucoup!) de m√©nage, quand m√™me:

"set smartindent
set tabstop=4
set shiftwidth=4
"set expandtab

"set mouse=a
"set nu

":map <C-a> GVgg
":map <C-n> :enew
":map <C-o> :e . <Enter>
":map <C-s> :w <Enter>
":map <C-c> y
":map <C-v> p
":map <C-x> d
":map <C-z> u
":map <C-t> :tabnew <Enter>
":map <C-i> >>
":map <C-w> :close <Enter>
":map <C-W> :q! <Enter>
":map <C-f> /
":map <C-h> :%s/
":map <S-t> vat
":map <S-T> vit
":map <S-{> vi{
":map <S-(> vi(
":map <S-[> vi[

" Pour sauvegarder "comme tout le monde" avec un Ctrl-S
:nmap <c-s> :w<CR>
:imap <c-s> <Esc>:w<CR>a

" Pour quitter "comme tout le monde" avec un Ctrl-Q, poil au...
:nmap <c-q> :q<CR>
:imap <c-q> <Esc>:q<CR>



"Je me fais des raccourcis pour les Fn:
":map <F1>
":map <F2>
":map <F3>
":map <F4>


"pour sauver et faire tourner le fichier courant par rebol^W n'importe quoi, pourvu que le chieboum soit bien fait:
"to save and run the current file by rebol^W interpreter^W anything, as long as the shebang is correct:
"map <F5> :w<cr> :!rebol -qs %<cr>
" *** ENLEV√â POUR VIMSPECTOR( ***
map  <F5> :w<cr> :!./%<cr>
imap <F5> <esc>:w<cr> :!./%<cr>i
" *** ENLEV√â POUR VIMSPECTOR) ***
"Utile pour un script Rebol existant, qu'on n'a nulle intention de modifier, et qui n'a aucun chieboum:
map <s-F5> :!rebol -qs %<cr>


""pour faire tourner la s√©lection courante par rebol:
""to interpret the current visual selection by rebol interpreter:
":map <F6> :w! tmp_vim_block<cr> :!echo "rebol []" > tmp_vim_block.rr && cat tmp_vim_block.rr tmp_vim_block > tmp_vim_block.r && rebol -qs tmp_vim_block.r && rm tmp_vim_block.rr tmp_vim_block.r tmp_vim_block<cr>

"mieux:
"even better: 

"pour faire tourner le paragraphe courant par rebol:
"to interpret the current paragraph by rebol interpreter:
map <F6> mzvip :w! /tmp/tmp_vim_block<cr>:!echo "rebol []" > /tmp/tmp_vim_block.rr && echo 'prin rejoin [newline "=>" newline {;======== code evaluation output: ========= }] ' >> /tmp/tmp_vim_block.rr && echo 'print "{{{"' >> /tmp/tmp_vim_block.rr && cat /tmp/tmp_vim_block.rr /tmp/tmp_vim_block > /tmp/tmp_vim_block.r && echo 'prin {;==========================================}' >> /tmp/tmp_vim_block.r && echo 'print " }}}" wait 0.1 print rejoin [newline {... Entr√©e pour continuer}] input' >> /tmp/tmp_vim_block.r && rebol -qs /tmp/tmp_vim_block.r<cr>`z
imap <F6> <ESC> mzvip :w! /tmp/tmp_vim_block<cr>:!echo "rebol []" > /tmp/tmp_vim_block.rr && echo 'prin rejoin [newline "=>" {;======== code evaluation output: ========= }] ' >> /tmp/tmp_vim_block.rr && echo 'print "{{{"' >> /tmp/tmp_vim_block.rr && cat /tmp/tmp_vim_block.rr /tmp/tmp_vim_block > /tmp/tmp_vim_block.r && echo 'prin {;==========================================}' >> /tmp/tmp_vim_block.r && echo 'print " }}}" wait 0.1 print rejoin [newline {... Entr√©e pour continuer}] input' >> /tmp/tmp_vim_block.r && rebol -qs /tmp/tmp_vim_block.r<cr>`zi
"(des vieilleries:){{{
":map <F6> vip :w! tmp_vim_block<cr> :!echo "rebol []" > tmp_vim_block.rr && cat tmp_vim_block.rr tmp_vim_block > tmp_vim_block.r && rebol -qs tmp_vim_block.r && rm tmp_vim_block.rr tmp_vim_block.r tmp_vim_block<cr>
"map <F6> vip :w! /tmp/tmp_vim_block<cr>:!echo "rebol []" > /tmp/tmp_vim_block.rr && echo 'print rejoin [newline "=>" newline {;======== code evaluation output: =========} ]' >> /tmp/tmp_vim_block.rr  && cat /tmp/tmp_vim_block.rr /tmp/tmp_vim_block > /tmp/tmp_vim_block.r && echo "print {;==========================================} wait 0.5 print rejoin [newline newline newline {Entr√©e pour continuer}] input" >> /tmp/tmp_vim_block.r && rebol -qs /tmp/tmp_vim_block.r<cr>}k
"map <F6> vip :w! /tmp/tmp_vim_block<cr>:!echo "rebol []" > /tmp/tmp_vim_block.rr && echo 'prin rejoin [newline "=>" newline {;======== code evaluation output: ========= } ]' >> /tmp/tmp_vim_block.rr && echo " ; {{{" >> /tmp/tmp_vim_block.rr  && cat /tmp/tmp_vim_block.rr /tmp/tmp_vim_block > /tmp/tmp_vim_block.r && echo "prin {;==========================================}  >> /tmp/tmp_vim_block.r && echo '}}}"' >> /tmp/tmp_vim_block.r && echo "wait 0.5 print rejoin [newline newline newline {Entr√©e pour continuer}] input" >> /tmp/tmp_vim_block.r && rebol -qs /tmp/tmp_vim_block.r"<cr>}k
"KK! map <F6> vip :w! /tmp/tmp_vim_block<cr>:!echo "rebol []" > /tmp/tmp_vim_block.rr && \ echo 'prin rejoin [newline "=>" newline {;======== code evaluation output: ========= } ]' >> /tmp/tmp_vim_block.rr && echo "{{{" >> /tmp/tmp_vim_block.rr  && cat /tmp/tmp_vim_block.rr /tmp/tmp_vim_block > /tmp/tmp_vim_block.r && echo "prin {;==========================================} > /tmp/tmp_vim_block.r && echo 'print "}}}"' > /tmp/tmp_vim_block.r print rejoin [newline newline newline {Entr√©e pour continuer}] input" >> /tmp/tmp_vim_block.r && rebol -qs /tmp/tmp_vim_block.r<cr>}k
"map <F6> vip :w! /tmp/tmp_vim_block<cr>:!echo "rebol []" > /tmp/tmp_vim_block.rr && echo 'prin rejoin [newline "=>" newline {;======== code evaluation output: ========= } ]' >> /tmp/tmp_vim_block.rr && echo "{{{" >> /tmp/tmp_vim_block.rr  && cat /tmp/tmp_vim_block.rr /tmp/tmp_vim_block > /tmp/tmp_vim_block.r && echo "prin {;==========================================} && echo "}}}" wait 0.5 print rejoin [newline newline newline {Entr√©e pour continuer}] input" >> /tmp/tmp_vim_block.r && rebol -qs /tmp/tmp_vim_block.r<cr>}k
"map <F6> vip :w! /tmp/tmp_vim_block<cr>:!echo "rebol []" > /tmp/tmp_vim_block.rr && echo 'print rejoin [newline "=>" newline {;======== code evaluation output: =========} ]' >> /tmp/tmp_vim_block.rr  && cat /tmp/tmp_vim_block.rr /tmp/tmp_vim_block > /tmp/tmp_vim_block.r && echo "print {;==========================================} wait 0.5 print rejoin [newline newline newline {Entr√©e pour continuer}] input" >> /tmp/tmp_vim_block.r && rebol -qs /tmp/tmp_vim_block.r<cr>}k
"map <F6> vip :w! /tmp/tmp_vim_block<cr>:!echo "rebol []" > /tmp/tmp_vim_block.rr && echo 'prin rejoin [newline "=>" newline {;======== code evaluation output: ========= }] ' >> /tmp/tmp_vim_block.rr && echo 'print "{{{"' >> /tmp/tmp_vim_block.rr && cat /tmp/tmp_vim_block.rr /tmp/tmp_vim_block > /tmp/tmp_vim_block.r && echo 'prin {;==========================================}' >> /tmp/tmp_vim_block.r && echo 'print " }}}" wait 0.1 print rejoin [newline newline {... Entr√©e pour continuer}] input' >> /tmp/tmp_vim_block.r && rebol -qs /tmp/tmp_vim_block.r<cr>}k
"}}}

"Pour faire √† la mode, et faire du javascript (√† reculons...), faire tourner le paragraphe courant par javascript:
nnoremap <s-F6> mzvip :w! /tmp/tmp_vim_block<cr>:! js /tmp/tmp_vim_block && echo "Entr√©e pour poursuivre..." && read<cr>`z
inoremap <s-F6> <ESC> mzvip :w! /tmp/tmp_vim_block<cr>:! js /tmp/tmp_vim_block && echo "Entr√©e pour poursuivre..." && read<cr>`zi

"Pour faire tourner le paragraphe courant par python3:
nnoremap <c-F6> mzvip :w! /tmp/tmp_vim_block<cr>:!echo 'print("\n=>\n\# ======== code evaluation output: ========= {{{")' > /tmp/tmp_vim_block.pyy && cat /tmp/tmp_vim_block.pyy /tmp/tmp_vim_block > /tmp/tmp_vim_block.py && echo 'print("\# ========================================== }}}\n... Entr√©e pour continuer")' >> /tmp/tmp_vim_block.py && echo 'input()' >> /tmp/tmp_vim_block.py && python3 /tmp/tmp_vim_block.py\|\|read<cr>`z
inoremap <c-F6> <ESC> mzvip :w! /tmp/tmp_vim_block<cr>:!echo 'print("\n=>\n\# ======== code evaluation output: ========= {{{")' > /tmp/tmp_vim_block.pyy && cat /tmp/tmp_vim_block.pyy /tmp/tmp_vim_block > /tmp/tmp_vim_block.py && echo 'print("\# ========================================== }}}\n... Entr√©e pour continuer")' >> /tmp/tmp_vim_block.py && echo 'input()' >> /tmp/tmp_vim_block.py && python3 /tmp/tmp_vim_block.py\|\|read<cr>`zi

"Pour faire tourner le paragraphe courant par un compilateur C:
map <s-c-F6> mzvip :w! /tmp/tmp_vim_block.c<cr>: !gcc -g -Wall -std=c99 /tmp/tmp_vim_block.c -o /tmp/tmp_vim_block && /tmp/tmp_vim_block ; echo "... Entr√©e pour continuer" && read<cr>`z
imap <s-c-F6> <ESC> mzvip :w! /tmp/tmp_vim_block.c<cr>: !gcc -g -Wall -std=c99 /tmp/tmp_vim_block.c -o /tmp/tmp_vim_block && /tmp/tmp_vim_block ; echo "... Entr√©e pour continuer" && read<cr>`zi

"pour commenter une ligne de code Rebol et passer √† la suivante:
map ; <Home>i;<Esc><Down>

"pour commenter une ligne de code, genre shell script, par # , puis passer √† la suivante:
":map &; <Home>i#<Esc><Down>
" => marche pas...
map ¬£ <Home>i#<Space><Esc><Down>

"pour commenter une ligne de code SQL et passer √† la suivante:
map - <Home>i--<Space><Esc><Down><Home>


"Et un raccourci pour s√©lectionner un Paragraphe:
map <C-S-p> vip
"(enlev√© <S-p> qui fait paste avant)
"Un autre raccourci, qui utilise le symbole ¬ß (touche !):
map  ¬ß vip
"imap <C-¬ß> <esc>vipi "     => marche pas...


" pour faire tourner le paragraphe courant par bash:
map  <F8>      mzvip :w! /tmp/tmp_vim_block<cr> :!bash /tmp/tmp_vim_block && read <cr>`z
imap <F8> <esc>mzvip :w! /tmp/tmp_vim_block<cr> :!bash /tmp/tmp_vim_block && read <cr>`zi


" Pour s√©lectionner divers bidules par des double (non, d√©j√† fait)
"<LeftMouse>     - Left mouse button press
"<RightMouse>    - Right mouse button press
"<MiddleMouse>   - Middle mouse button press
"<LeftRelease>   - Left mouse button release
"<RightRelease>  - Right mouse button release
"<MiddleRelease> - Middle mouse button release
"<LeftDrag>      - Mouse drag while Left mouse button is pressed
"<RightDrag>     - Mouse drag while Right mouse button is pressed
"<MiddleDrag>    - Mouse drag while Middle mouse button is pressed
"<2-LeftMouse>   - Left mouse button double-click
"<2-RightMouse>  - Right mouse button double-click
"<3-LeftMouse>   - Left mouse button triple-click
"<3-RightMouse>  - Right mouse button triple-click
"<4-LeftMouse>   - Left mouse button quadruple-click
"<4-RightMouse>  - Right mouse button quadruple-click
"<X1Mouse>       - X1 button press
"<X2Mouse>       - X2 button press
"<X1Release>     - X1 button release
"<X2Release>     - X2 button release
"<X1Drag>        - Mouse drag while X1 button is pressed
"<X2Drag>        - Mouse drag while X2 button is pressed

"  - Right mouse button triple-click => s√©lectionne d√©j√† une ligne, je laisse.

"pour s√©lectionner une phraSe:
:nnoremap <3-LeftMouse> vis
"pour s√©lectionner un Paragraphe (comme ctrl-P):
:nnoremap <4-LeftMouse> vip


"Un raccourci similaire √† *, mais avec shift, √ßa fait ¬µ, qui
"ouvre une autre fen√™tre puis fait un *
" => tr√®s utile pour les tags
" => mince, pas pu faire :map <S-*> :split <cr>*
"                  ni:   :map <¬µ> :split <cr>*
"donc je fais avec F3, et vers le haut, c'est plus commode, avec #:
:map <F3> :split<cr>#
" Pareil, en mode insertion aussi:
imap <F3> <Esc> :split<cr>#i
"Pareil, en faisant une division verticale:
":map <S-F3> :vsplit<cr>#
"=> ne fonctionne pas...


"Pour PAS ne pas recommencer la recherche au d√©but/fin du fichier:
":set nowrapscan 
"Pour ne pas recommencer la recherche au d√©but/fin du fichier:
:set wrapscan

"le plus souvent, le wrap m'emmerdoie, pour des sources bien indent√©s notamment; donc j'√¥te:
:set nowrap
"mais des fois, il rend service..
:set wrap

"Pour √¥ter les /* */ disgr√¢cieux de mes folds {{{ }}} ou [ ]
:set commentstring=%s


"R√©ticule;
""Pour avoir un r√©ticule amusant (et utile):
":set cursorcolumn
":set cursorline
"
""Pour mettre du gris√© dans les 2 axes du r√©ticule (car le soulignement de l'axe horizontal g√™ne quelque peu la lecture):
":hi CursorLine cterm=NONE
"":hi CursorLine ctermbg=Cyan
":hi CursorLine ctermbg=Grey
"":hi CursorColumn ctermbg=Cyan
"
"=> En fait, d√®s qu'on est dans un ssh quelconque, ou une console, ce r√©ticule est giga-chiasseur: zou, je le zappe.


"syntaxe Rebol:
:set syntax=rebol
"aussit√¥t d√©sactiv√©e:
:set syntax=none
"=> c'est pour avoir les compl√©tions judicieuses, les mots avec des - vus comme un seul mot (ce qui est commode), mais sans avoir les couleurs (qui n'aident pas forc√©ment beaucoup).


" Des couleurs de vimdiff un peu plus humainement lisibles pour un presse-b!t3:
highlight DiffAdd    ctermbg=6
highlight DiffChange ctermbg=2
highlight DiffDelete ctermbg=6
highlight DiffText   ctermfg=1 ctermbg=2 cterm=bold

" Toujours dans le cadre d'un vimdiff, passer √† la ligne et ne pas coloriser la syntaxe:
if &diff
    syntax off
    " essay√© tout √ßa, sans succ√®s:{{{
    "execute 'set wrap'
    "":set wrap
    "execute 'windo set wrap'
	"autocmd FilterWritePre * if &diff | setlocal wrap< | endif
    "}}}
    :set wrap
    "Pour ignorer les espaces (utile quand collage de codes divers...)
    :set diffopt+=iwhite
endif

" Pour scroller plus confortablement, mappons Fn+Ctrl+fl√®ches avec C-D et C-U:
"map <C-S-PageDown> <C-D>
"map <C-S-PageUp> <C-U>
"inoremap <C-S-PageDown> <p>
"inoremap <C-S-PageUp> <p>
"  2018_10_13__11_44_06 => ne fonctionne pas.


" Contenu de ~/dev/postgresql/src/tools/editors/vim.samples:
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" These settings are appropriate for editing PostgreSQL code with vim
"
" You would copy this into your .vimrc or equivalent
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

:if match(getcwd(), "/pgsql") >=0 ||  match(getcwd(), "/postgresql") >= 0

:  set cinoptions=(0
:  set tabstop=4
:  set shiftwidth=4

:endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Incr√©menter et d√©cr√©menter un nombre sous le curseur: {{{
" normalement, c'est <C-A>,<C-X>, mais dans un screen c'est peu ais√©:
"Mieux, A augmente et Q (juste en-dessous sur mon AZERTY)" diminue, avec Alt:
:nnoremap <A-a> <C-a>
:nnoremap <A-q> <C-x>
"}}}


" Mes macros pratiques, que je conserve:
" @S Soulignements => pour mettre 32 fois _ sur une ligne de type _______________ENCOURS_______________QUELQUECHOSE
let @s = '[1~32r_[1~'

" Pour √©diter rapidos du HTML et CSS, plugin https://github.com/mattn/emmet-vim/:
" Plugin 'mattn/emmet-vim' (non, marche pas ainsi)

" Pour fermer les ([{"' automagiquement:
:inoremap ( ()<Left>
:inoremap [ []<Left>
:inoremap { {}<Left>
:inoremap " ""<Left>
" √©tait (annul√©, √ßa met souvent le oua√Ø ...)
":inoremap ' ''<Left> (annul√©, √ßa met le oua√Ø dans l'apostrophage...)
:inoremap < <><Left>



""2020_11_12__15_59_26  J'annule tout √ßa:{{{
""
""" 2020_10_13__11_41_18
""" En lisant √ßa: https://realpython.com/vim-and-python-a-match-made-in-heaven/
""" Pour Vundle:
"""set nocompatible              " required  <= inutile, c'est d√©j√† mentionn√© plus haut
""filetype off                  " required
"""
""" set the runtime path to include Vundle and initialize
""set rtp+=~/.vim/bundle/Vundle.vim
""call vundle#begin()
"""
""" alternatively, pass a path where Vundle should install plugins
"""call vundle#begin('~/some/path/here')
"""
""" let Vundle manage Vundle, required
""Plugin 'gmarik/Vundle.vim'
"""
""" add all your plugins here (note older versions of Vundle
""" used Bundle instead of Plugin)
"""
""Plugin 'tmhedberg/SimpylFold'
""Plugin 'vim-scripts/indentpython.vim'
""Plugin 'scrooloose/nerdtree'
""" ...
""" All of your Plugins must be added before the following line
""call vundle#end()            " required
""filetype plugin indent on    " required
""}}}



"Pro Tip #5: Try this if you want to see the docstrings for folded code:
let g:SimpylFold_docstring_preview=1

"To add the proper PEP 8 indentation, add the following to your .vimrc:
"au BufNewFile,BufRead *.py set tabstop=4 softtabstop=4 shiftwidth=4 textwidth=79 expandtab autoindent fileformat=unix
" textwidth=79 me GONFLE gravement.
au BufNewFile,BufRead *.py set tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent fileformat=unix
"
"For full stack development, you can use another au command for each filetype:
au BufNewFile,BufRead *.js,*.html,*.css set tabstop=2 softtabstop=2 shiftwidth=2

"Flagging Unnecessary Whitespace
"You also want to avoid extraneous whitespace. You can have VIM flag that for you so that it‚Äôs easy to spot and then remove:
"au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

"Auto-Complete

"The best plugin for Python auto-complete is YouCompleteMe. Again, use Vundle to install:
"Bundle 'Valloric/YouCompleteMe'
	"=> bof, non, mon autocompl√©tion est d√©j√† Parfaite.


"""python with virtualenv support
""py << EOF
""import os
""import sys
""if 'VIRTUAL_ENV' in os.environ:
""  project_base_dir = os.environ['VIRTUAL_ENV']
""  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
""  execfile(activate_this, dict(__file__=activate_this))
""EOF
"" => ? Marche pas.



" La leader key: espace, au lieu de l'abscon et malpratique \:
let mapleader = " "     " map leader to Space
set timeoutlen=500      " Set timeout length to 500 ms
set showcmd "Vim, by default, shows no feedback for this timeout length. Add set showcmd to your vimrc and it will show your leader key in the bottom right corner for the duration of the timeout.

"Nota Bene: pour highlighter les mots sous le curseur avec 123456789,
"il faut faire <leader>m
"puis <leader>1 ou 2 ... sur le mot choisi

" Un moignon de plugin pour corriger la faute d'orthographe pr√©c√©dente par la premi√®re suggestion et revenir au m√™me endroit en faisant <espace>sp  => {{{
" Voil√† mon premier plugin, √† ce stade (oui, c'est pas un plugin, c'est quelques lignes dans mon .vimrc):

function! FixLastSpellingError()
 normal! mm[s1z=`m
endfunction
nnoremap <leader>sp :call FixLastSpellingError()<cr>
nnoremap <leader>sop :source %<cr>

"}}}

"En suivant les conseils de https://riptutorial.com/ vim.pdf :{{{
"2020_11_29__18_28_55 

" Automatically source .vimrc after saving
" Add this to your $MYVIMRC :{{{

" Source vim configuration file whenever it is saved
if has ('autocmd')         " Remain compatible with earlier versions
	augroup Reload_Vimrc   " Group name. Always use a unique name!
	autocmd!
                           " Clear any preexisting autocommands from this group
	autocmd! BufWritePost $MYVIMRC source % | echom "Reloaded " . $MYVIMRC | redraw
	autocmd! BufWritePost $MYGVIMRC if has('gui_running') | so % | echom "Reloaded " . $MYGVIMRC | endif | redraw
	augroup END
endif " has autocmd

" Features:
"	‚Ä¢ echom tells the user what has happened (and also logs to :messages ).
"	‚Ä¢ $MYVIMRC and $MYGVIMRC handle platform-specific names for the configuration files,
"	‚Ä¢ and only match the actual configuration files (ignoring copies in other directories, or a
"     fugitive://diff)
" 	‚Ä¢ has() will prevent an error if using incompatible versions, such as vim-tiny .
"	‚Ä¢ autocmd! avoids buildup of multiple identical autocommands if this file is sourced again. (It
"     clears all commands in the named group, so the group name is important.)
" }}}

" }}}

"Num√©rotation des lignes:
set nu

"Ouverture d'une fen√™tre d'exploration de fichiers netrw √† gauche:
":Lexplore
" => marche pas... Pagrave.

" selon le conseil de https://medium.com/@Aenon/vim-swap-backup-undo-git-2bf353caa02f:
set backupdir=.backup/,~/.backup/,/tmp//
set directory=.swp/,~/.swp/,/tmp//
set undodir=.undo/,~/.undo/,/tmp//


" Installation de vimspector
"let g:vimspector_enable_mappings = 'HUMAN'
" => annul√©, je pr√©f√®re mon F5 tout b√™te
"Voici les raccourcis "humains" de vimspector:
"  nmap <F5>         <Plug>VimspectorContinue
"  nmap <leader><F5> <Plug>VimspectorLaunch
"  nmap <F3>         <Plug>VimspectorStop
"  nmap <F4>         <Plug>VimspectorRestart
"  nmap <F6>         <Plug>VimspectorPause
"  nmap <F9>         <Plug>VimspectorToggleBreakpoint
"  nmap <leader><F9> <Plug>VimspectorToggleConditionalBreakpoint
"  nmap <F8>         <Plug>VimspectorAddFunctionBreakpoint
"  nmap <leader><F8> <Plug>VimspectorRunToCursor
"  nmap <F10>        <Plug>VimspectorStepOver
"  nmap <F11>        <Plug>VimspectorStepInto
"  nmap <F12>        <Plug>VimspectorStepOut
" => du coup, il faut que je red√©finisse mes raccourcis...
" => non: quand on r√©ussit √† lancer le d√©bogueur python, les raccourcis de vimspector fonctionnent.


